 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();
const request = require('request')
    , assert = require('assert')
    , googleImages = require('google-images')
    , mongo = require('mongodb').MongoClient;
const MONGODB_URI = process.env.MONGODB_URI; 
const GIclient = new googleImages(process.env.CSE_ID, process.env.API_KEY);
// const { google } = require("googleapis");
// const customsearch = google.customsearch('v1');
var collection;

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });


app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    });

app.route('/api/latest/imagesearch')
    .get(function(req, res) {
      mongo.connect(MONGODB_URI, function(err, client) {
        assert.equal(err, null);
        // if(err) throw err;
        const db = client.db('matdb');
        collection = db.collection('imgsearch');
        var cursor = collection.find();
        cursor.forEach(
          function(obj) {
            res.write(JSON.stringify(obj)+'\n\n');
          },
          function(err) {
            assert.equal(err, null);
            console.log('End of cursor. Send the end()');
            res.end();
            // db.close();
          }
        );
      });
    })

app.route('/play')    // Use this route to test something
    .get(function(req, res) {
      res.send('Nothing to test');
    });

// var store = function (str, pgNum) {
var store = (str, pgNum) => {  
  mongo.connect(MONGODB_URI, function(err, client) {
    assert.equal(err, null);
    const db = client.db('matdb');
    collection = db.collection('imgsearch');
    var d = new Date();
    var obj = {search_string: str, when: d.toISOString(), page_num: pgNum};
    console.log('Inserting...', obj);
    try {
      collection.insertOne(obj);
    } catch (e) {
      assert.equal(e, null);
    };
  });
}

app.route('/api/images/:srchStr')    
    .get(function(req, res) {
      console.log('req.params.srchStr ', req.params.srchStr);
      console.log('req.query ', req.query);
      var pageNum = Number(req.query.offset) || 1;
      console.log('pageNum: ', pageNum);
      GIclient.search(req.params.srchStr, {page: pageNum})
        .then(function(images) {
          console.log('From Google:', images[0]);
          var sObj;
          if (images.length > 0) {
            for (var i=0; i<images.length; i++) {
            // images.forEach(image => {
              sObj = {};
              sObj.image_url = images[i].url;
              sObj.alt_text = images[i].description;
              sObj.page_url = images[i].parentPage;
              res.write(JSON.stringify(sObj) + '\n\n');
            }
            res.end();
          } else {       
            res.send('No images returned');
          }
          store(req.params.srchStr, pageNum);
        }).catch(e => {
          console.log(e); // Error object
          res.send('Bad');
        });
      
      /*customsearch.cse
        .list({
          cx: process.env.CSE_ID,
          q: 'car',
          auth: process.env.API_KEY,
          searchType: "image"
        }, (err, resp) => {
          if (err) { console.log('ERROR..', err); assert(err, null); throw err; }
          // Got the response from custom search
          // console.log('Full Result: ', resp);
          console.log('Result: ', resp.data);
          console.log('# Results: ' + resp.data.searchInformation.formattedTotalResults);
          if (resp.data.items && resp.data.items.length > 0) {
            console.log('First result is ' + JSON.stringify(resp.data.items[0])) ;
            console.log('First image is ' + JSON.stringify(resp.data.items[0].image));
            res.send(resp.data.items[0]);
          } else {
            res.send('Bad');
          }
        });    
        */
  
    });

app.use(function(req, res, next){
  res.status(404);
  // res.type('txt').send('Incorrect usage of the API');
  var sObj = {};
  sObj.error = 'Incorrect usage of the API';
  res.send(sObj);
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

